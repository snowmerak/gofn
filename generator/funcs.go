package generator

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"

	"github.com/snowmerak/gofn/parser"
)

func generateFuncs(outDir string, funcs []parser.FuncInfo) error {
	for _, f := range funcs {
		if f.Directive == "" {
			continue
		}
		// multi-result functions are supported by the generator
		var buf bytes.Buffer
		hdr := fmt.Sprintf("// Code generated by gofn; DO NOT EDIT.\n// gofn: %s\n\n", f.Directive)
		buf.WriteString(hdr)
		buf.WriteString("package " + f.Package + "\n\n")
		wrapper := generateCurriedFunc(f)
		buf.WriteString(wrapper + "\n")

		fname := fmt.Sprintf("%s_%s_gen.go", f.Name, normalizeDirective(f.Directive))
		out := filepath.Join(outDir, fname)
		formatted, err := formatSource(buf.Bytes())
		if err != nil {
			return err
		}
		if err := os.WriteFile(out, formatted, 0o644); err != nil {
			return err
		}
	}
	return nil
}
